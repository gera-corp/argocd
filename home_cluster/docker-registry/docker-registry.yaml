---
apiVersion: v1
kind: ConfigMap
metadata:
  name: docker-registry-config
  namespace: tools
data:
  config.yml: |
    version: 0.1
    log:
      level: info
    storage:
      cache:
        blobdescriptor: inmemory
      filesystem:
        rootdirectory: /var/lib/registry
      delete:
        enabled: true
    http:
      addr: :5000
      headers:
        X-Content-Type-Options: [nosniff]
        Access-Control-Allow-Origin: ['*']
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: docker-registry
  name: docker-registry
  namespace: tools
spec:
  selector:
    matchLabels:
      app: docker-registry
  serviceName: github2telegram
  replicas: 1
  template:
    metadata:
      labels:
        app: docker-registry
    spec:
      terminationGracePeriodSeconds: 10
      securityContext:
        fsGroup: 472
        supplementalGroups:
          - 0
      containers:
        - name: docker-registry
          image: registry:2
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 5000
              name: http-registry
              protocol: TCP
          # readinessProbe:
          #   failureThreshold: 3
          #   httpGet:
          #     path: /index.html
          #     port: 80
          #     scheme: HTTP
          #   initialDelaySeconds: 10
          #   periodSeconds: 30
          #   successThreshold: 1
          #   timeoutSeconds: 2
          # livenessProbe:
          #   failureThreshold: 3
          #   initialDelaySeconds: 30
          #   periodSeconds: 10
          #   successThreshold: 1
          #   tcpSocket:
          #     port: 3000
          #   timeoutSeconds: 1
          resources:
            limits:
              memory: 512Mi
              cpu: "1"
            requests:
              memory: 256Mi
              cpu: "0.2"
          volumeMounts:
            - mountPath: /var/lib/registry
              name: docker-registry-pv
            - mountPath: /etc/docker/registry
              name: docker-registry-config-volume
      volumes:
        - name: docker-registry-config-volume
          configMap:
            defaultMode: 420
            name: docker-registry-config
  volumeClaimTemplates:
  - metadata:
      name: docker-registry-pv
      namespace: tools
    spec:
      accessModes: ["ReadWriteMany"]
      resources:
        requests:
          storage: 5G

---
apiVersion: v1
kind: Service
metadata:
  name: docker-registry
  namespace: tools
spec:
  ports:
    - port: 5000
      protocol: TCP
      targetPort: http-registry
  selector:
    app: docker-registry
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: docker-registry-cert
  namespace: tools
spec:
  commonName: docker-registry.geracorp.ru
  secretName: docker-registry-cert
  dnsNames:
    - docker-registry.geracorp.ru
  issuerRef:
    kind: ClusterIssuer
    name: letsencrypt-prod
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: docker-registry-tls
  namespace: tools
spec:
  entryPoints:
    - websecure
  routes:
  - match: Host(`docker-registry.geracorp.ru`)
    kind: Rule
    middlewares:
    - name: docker-registry-auth
    services:
    - name: docker-registry
      port: 5000
  tls:
    secretName: docker-registry-cert
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: docker-registry-local-tls
  namespace: tools
spec:
  entryPoints:
    - websecure
  routes:
  - match: Host(`docker-registry.local.geracorp.work`)
    kind: Rule
    middlewares:
    - name: docker-registry-auth
    services:
    - name: docker-registry
      port: 5000
  tls:
    secretName: wildcard-home-local-crt
---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: docker-registry-auth
  namespace: tools
spec:
  basicAuth:
    secret: docker-registry-secret
---
apiVersion: v1
kind: Secret
metadata:
  name: docker-registry-secret
  namespace: tools
  annotations:
    avp.kubernetes.io/path: "secret/tools/docker_registry"
    avp.kubernetes.io/kv-version: "1"
type: Opaque
data:
  users: <users>
