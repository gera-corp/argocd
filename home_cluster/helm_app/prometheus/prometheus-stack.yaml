apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: kube-prometheus-stack
  annotations:
    argocd.argoproj.io/sync-wave: "3"
spec:
  destination:
    name: in-cluster
    namespace: monitoring
  project: default
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
      - ServerSideApply=true
  source:
    repoURL: 'https://prometheus-community.github.io/helm-charts'
    chart: kube-prometheus-stack
    targetRevision: 76.*
    helm:
      skipCrds: false
      valuesObject:
        defaultRules:
          create: true
          rules:
            alertmanager: false
            etcd: true
            configReloaders: true
            general: true
            k8s: true
            kubeApiserverAvailability: true
            kubeApiserverBurnrate: true
            kubeApiserverHistogram: true
            kubeApiserverSlos: true
            kubeControllerManager: false
            kubelet: true
            kubeProxy: true
            kubePrometheusGeneral: true
            kubePrometheusNodeRecording: true
            kubernetesApps: true
            kubernetesResources: true
            kubernetesStorage: true
            kubernetesSystem: true
            kubeSchedulerAlerting: false
            kubeSchedulerRecording: false
            kubeStateMetrics: true
            network: false
            node: true
            nodeExporterAlerting: true
            nodeExporterRecording: true
            prometheus: true
            prometheusOperator: true
          disabled:
            Watchdog: true
            InfoInhibitor: true
            KubeMemoryOvercommit: true
            KubeCPUOvercommit: true
        prometheusOperator:
          enabled: true
          createCustomResource: true
          admissionWebhooks:
            enabled: true
            annotations:
              argocd.argoproj.io/hook: PreSync
              argocd.argoproj.io/hook-delete-policy: HookSucceeded
            mutatingWebhookConfiguration:
              annotations:
                argocd.argoproj.io/hook: PreSync
            validatingWebhookConfiguration:
              annotations:
                argocd.argoproj.io/hook: PreSync
            patch:
              annotations:
                argocd.argoproj.io/hook: PreSync
                argocd.argoproj.io/hook-delete-policy: HookSucceeded
        prometheus:
          enabled: true
          prometheusSpec:
            replicas: 1
            resources:
              limits:
                cpu: 1
                memory: 4Gi
              requests:
                cpu: 100m
                memory: 1024Mi
            ruleSelectorNilUsesHelmValues: false
            serviceMonitorSelectorNilUsesHelmValues: false
            podMonitorSelectorNilUsesHelmValues: false
            probeSelectorNilUsesHelmValues: false
            scrapeConfigSelectorNilUsesHelmValues: false
            storageSpec:
              volumeClaimTemplate:
                spec:
                  storageClassName: nfs-client
                  accessModes: ["ReadWriteOnce"]
                  resources:
                    requests:
                      storage: 32Gi
            additionalScrapeConfigs:
              - job_name: 'pods'
                kubernetes_sd_configs:
                - role: pod
                relabel_configs:
                - source_labels:
                    [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
                  separator: ;
                  regex: 'true'
                  replacement: $1
                  action: keep
                - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
                  separator: ;
                  regex: (.+)
                  target_label: __metrics_path__
                  replacement: $1
                  action: replace
                - source_labels:
                    [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
                  separator: ;
                  regex: ([^:]+)(?::\d+)?;(\d+)
                  target_label: __address__
                  replacement: $1:$2
                  action: replace
                - separator: ;
                  regex: __meta_kubernetes_pod_label_(.+)
                  replacement: $1
                  action: labelmap
                - source_labels: [__meta_kubernetes_namespace]
                  separator: ;
                  regex: (.*)
                  target_label: kubernetes_namespace
                  replacement: $1
                  action: replace
                - source_labels: [__meta_kubernetes_pod_name]
                  separator: ;
                  regex: (.*)
                  target_label: kubernetes_pod_name
                  replacement: $1
                  action: replace
        grafana:
          enabled: true
          sidecar:
            dashboards:
              annotations:
                grafana_folder: "Kubernetes"
              folderAnnotation: "grafana_folder"
              provider:
                foldersFromFilesStructure: true
          persistence:
            enabled: true
            type: pvc
            accessModes:
              - ReadWriteOnce
            size: 5Gi
            storageClassName: nfs-client
        alertmanager:
          enabled: true
          config:
            global:
              resolve_timeout: 1m
            route:
              group_by: ['alertname', 'namespace']
              group_wait: 30s
              group_interval: 5m
              repeat_interval: 12h
              routes:
              - match:
                receiver: 'telegram'
                continue: true
            receivers:
            - name: 'null'
            - name: 'telegram'
              telegram_configs:
              - bot_token_file: '/etc/alertmanager/secrets/alertmanager-secrets/telegram-bot-token'
                api_url: 'https://api.telegram.org'
                chat_id: 282307402
                parse_mode: ''
                send_resolved: true
            templates:
            - '/etc/alertmanager/config/*.tmpl'
          alertmanagerSpec:
            secrets:
            - alertmanager-secrets
          templateFiles:
            template_1.tmpl: |
              {{ define "telegram.default.message" }}
              {{ range .Alerts }}
              {{ if eq .Status "firing" }}‚ùå <b>Status:</b> Firing{{ else if eq .Status "resolved" }}‚úÖ <b>Status:</b> Resolved{{ end }}
              üñ•Ô∏è <b>Host:</b> {{ .Labels.instance }}
              ‚ùóÔ∏è <b>Alert</b><code> {{ .Annotations.summary }}</code>
              {{ if eq .Labels.severity "critical" }}üí• <b>Severity:</b> {{ .Labels.severity }}
              {{ else if eq .Labels.severity "warning" }}‚ö†Ô∏è <b>Severity:</b> {{ .Labels.severity }}
              {{ else }}‚ùóÔ∏è <b>Severity:</b> {{ .Labels.severity }}{{ end }}
              üóíÔ∏è <b>Description:</b><pre><code>{{ .Annotations.description }}</code></pre>
              {{ end }}
              {{ end }}
        kubeEtcd:
          enabled: true
          service:
            selector:
              k8s-app: kube-controller-manager # Fix selector for kube-etcd for Talos (set itentionally to kube-controller-manager because all master nodes has the same roles)
          serviceMonitor:
            relabelings:   # Add nodename label
              - sourceLabels: [__meta_kubernetes_pod_node_name]
                separator: ;
                regex: ^(.*)$
                targetLabel: nodename
                replacement: $1
                action: replace
            metricRelabelings:   # Remove pod label
              - action: labeldrop
                regex: pod
        kubeProxy:
          enabled: true
          service:
            enabled: true
            port: 10249
            targetPort: 10249
            selector:
              k8s-app: kube-proxy
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: grafana-cert
  namespace: monitoring
spec:
  commonName: mon.geracorp.ru
  secretName: grafana-cert
  dnsNames:
    - mon.geracorp.ru
  issuerRef:
    kind: ClusterIssuer
    name: letsencrypt-prod
---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: grafana-tls
  namespace: monitoring
spec:
  entryPoints:
    - websecure
  routes:
  - match: Host(`mon.geracorp.ru`)
    kind: Rule
    services:
    - name: kube-prometheus-stack-grafana
      port: 80
  tls:
    secretName: grafana-cert
