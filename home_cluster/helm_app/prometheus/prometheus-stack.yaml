apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: kube-prometheus-stack
  annotations:
    argocd.argoproj.io/sync-wave: "3"
spec:
  destination:
    name: in-cluster
    namespace: monitoring
  project: default
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
      - ServerSideApply=true
  source:
    repoURL: 'https://prometheus-community.github.io/helm-charts'
    chart: kube-prometheus-stack
    targetRevision: 66.*
    helm:
      skipCrds: false
      values: |-
        prometheus:
          enabled: true
          prometheusSpec:
            replicas: 1
            resources:
              limits:
                cpu: 1
                memory: 4Gi
              requests:
                cpu: 100m
                memory: 1024Mi
            ruleSelectorNilUsesHelmValues: false
            serviceMonitorSelectorNilUsesHelmValues: false
            podMonitorSelectorNilUsesHelmValues: false
            probeSelectorNilUsesHelmValues: false
            scrapeConfigSelectorNilUsesHelmValues: false
        grafana:
          enabled: true
          sidecar:
            dashboards:
              annotations:
                grafana_folder: "Kubernetes"
              folderAnnotation: "grafana_folder"
              provider:
                foldersFromFilesStructure: true
          persistence:
            enabled: true
            type: pvc
            accessModes:
              - ReadWriteOnce
            size: 5Gi
            storageClassName: nfs-client
        alertmanager:
          enabled: true
          config:
            global:
              resolve_timeout: 5m
            inhibit_rules:
              - source_matchers:
                  - 'severity = critical'
                target_matchers:
                  - 'severity =~ warning|info'
                equal:
                  - 'namespace'
                  - 'alertname'
              - source_matchers:
                  - 'severity = warning'
                target_matchers:
                  - 'severity = info'
                equal:
                  - 'namespace'
                  - 'alertname'
              - source_matchers:
                  - 'alertname = InfoInhibitor'
                target_matchers:
                  - 'severity = info'
                equal:
                  - 'namespace'
              - target_matchers:
                  - 'alertname = InfoInhibitor'
            route:
              group_by: ['namespace']
              group_wait: 30s
              group_interval: 5m
              repeat_interval: 12h
              receiver: 'telegram'
              routes:
              - receiver: 'telegram'
                matchers:
                  - alertname = "Watchdog"
            receivers:
            - name: 'telegram'
              telegram_configs:
              - bot_token_file: '/etc/alertmanager/secrets/alertmanager-secrets/telegram-bot-token'
                api_url: 'https://api.telegram.org'
                chat_id: 282307402
                parse_mode: ''
            templates:
            - '/etc/alertmanager/config/*.tmpl'
          alertmanagerSpec:
            secrets:
            - alertmanager-secrets
          templateFiles:
            template_1.tmpl: |-
              {{ define "telegram.default.message" }}
              Alert:
              {{ range .Alerts }}
                *Alert:* {{ .Annotations.summary }}
                *Description:* {{ .Annotations.description }}
                *Severity:* {{ .Labels.severity }}
                *Status:* {{ .Status }}
                *Starts At:* {{ .StartsAt }}
                *Ends At:* {{ .EndsAt }}
              {{ end }}
              {{ end }}
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: grafana-cert
  namespace: monitoring
spec:
  commonName: mon.geracorp.ru
  secretName: grafana-cert
  dnsNames:
    - mon.geracorp.ru
  issuerRef:
    kind: ClusterIssuer
    name: letsencrypt-prod
---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: grafana-tls
  namespace: monitoring
spec:
  entryPoints:
    - websecure
  routes:
  - match: Host(`mon.geracorp.ru`)
    kind: Rule
    services:
    - name: kube-prometheus-stack-grafana
      port: 80
  tls:
    secretName: grafana-cert
